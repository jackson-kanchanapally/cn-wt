//lalr.l

%{
#include <stdio.h>
#include "ytab.h"
%}

%%
[0-9]+{yylval.dval = atof(yytext);
          return DIGIT;
        }

\n  return yytext[0]; 
%%

//lalr.y

%{
#include <stdio.h>
%}

%union {
    double dval;
}

%token <dval> DIGIT
%type <dval> expr term factor

%%

line : expr '\n' {
    printf("result %g\n", $1);
}
;

expr : expr '+' term {$$ = $1 + $3;}
     | term;

term : term '*' factor {$$ = $1 * $3;}
     | factor;

factor : '(' expr ')' {$$ = $2;}
       | DIGIT ;

%%
int main() {
    yyparse();
    return 0;
}

int yywrap() {
    return 1;
}

void yyerror(char *s) {
    printf("error %s", s);
}



Output :  
lex lalr.l
yacc -d lalr.y
gcc lex.yy.c y.tab.c -w
./a.out 

100+100  
result 200
100+*100
error